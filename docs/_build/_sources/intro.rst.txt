Introduction
============

Background
----------

| This automation framework is for testing **Qumu** products via `RESTful <https://en.wikipedia.org/wiki/Representational_state_transfer/>`_ APIs.

The code is written in `Python <https://www.python.org>`_.
Python programming language introduction is available on `Confluence <https://confluence.qumu.com/display/auto/Python+Programming>`_.
Tutorials are also included in the Python installation, and are available on-line.

| This framework is using `py.test <https://docs.pytest.org/en/latest/>`_ as the driving engine for the unit-test style tests.
| It starts with PathFinder `Swagger <https://swagger.io/>`_-based API, and could be extended to VCC and other projects.
| Similarly, it can be extended to cover UI test automation.

Tests Workflow
--------------

Basic automation framework start-up work-flow is:

* Load System Under Test (SUT) environment configuration from `YAML <https://en.wikipedia.org/wiki/YAML>`_ files.
    * **data/qed_env.yml** - PathFinder, PFEs, Jenkins, common assets.

      See in-line comments in this YAML file for more details.
* Connect to the PathFinder server, and download Swagger schema.
* Patch the schema, to fix known issues, and add missing/hidden features.
    * **deliverySystems.diff.patch.json** - defined in data/qed_env.yml (above).
* Auto-generate API calls from Python client code.
* Run the tests, per `py.test command line options <https://docs.pytest.org/en/latest/usage.html>`_.
  Notes:

    * All tests should have multiple `marks <https://docs.pytest.org/en/latest/mark.html#mark>`_, so they can be executed and filtered accordingly.
    * Many tests require the **init** tag to initialize the tests, together with *functional/init_PF_test.py* and other setup test files.

  For example::

   py.test -m "init or upgrade" --disable-pytest-warnings --disable-warnings --alluredir allure -v -s functional/...

  or using the helper script::

   ./run.sh -m "init or upgrade" functional/...


Test Model
----------
Test cases can be executed on a clean-upgrade environment, with no pre-existing configuration,
or on an environment which has been configured with basic settings already
(such as configuration and authentication settings).
In some scenarios, test cases my rely on prior common configurations, such as audiences and PFE devices.
In addition, it is desirable to have the capability to repeat only part of the tests,
such as in the case of repeating only tests that failed in previous execution.

In order to allow these framework use-cases, we keep a the environment settings
in a common `py.test fixture <https://docs.pytest.org/en/latest/fixture.html>`_ called **context** (see :class:`conftest.Context` for latest details).

The **context** fixture hierarchy is as follows:

* *status* - `Box <https://github.com/cdgriffith/Box>`_ with test status details. Example, flags for PF & PFE clean upgrades.
* *config* - `Box <https://github.com/cdgriffith/Box>`_ object from *data/qed_env.yml*.
* *data* - `Box <https://github.com/cdgriffith/Box>`_ holding data for driving different test cases,
  as generated by the different test scripts.
* *pf* - PathFinder class instance for PathFinder system under test.
    * *pf.spec* - Swagger spec retrieved from PathFinder SUT, possibly patched.
    * *pf.schema* - Swagger schema object retrieved from PathFinder SUT / spec.
    * *pf.cl* - `Swagger client <http://bravado.readthedocs.io/en/latest/index.html>`_ instance, to make PathFinder RESTful calls.
* *cl* - shorthand link to *pf.cl*.
* *sc* - shorthand link to *pf.schema*.
* *PF* - common access to :meth:`PathFinder` module.
* *PFE* - common access to :meth:`PathFinderEdge` module.
* *logger* - common :mod:`logging` module.
* *faker* - common `fake-data <http://faker.readthedocs.io/en/master/>`_ generator.

Folders Hierarchy
-----------------

Top folder structure:

===============================   ===================================
Folder                            Content
===============================   ===================================
allure                            allure configurtion and raw results
allure-report                     allure report
bravado-patch                     patch files for bravado
conftest.py                       py.test configuration
content                           media and content for tests
data                              data files for tests
docs                              project documentation
feature                           BDD tests
functional                        py.test tests
model                             model tests
notebooks                         place for notebooks
pytest.ini                        py.test configuration
qe_common.py                      common qe code
qe_modules                        QE modules
requirements.txt                  project installation
run.sh                            sample execution command-line
===============================   ===================================
