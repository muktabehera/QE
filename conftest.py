"""Global test configuration."""
import logging
# import logging.handlers
import pytest

from box import Box
# from faker import Factory
from grappa import expect as _expect
from grappa import should as _should

from qe_common import init_logger, load_config_file, load_auth_file, get_config_file_cmdarg
import qe_modules.PathFinder as _PF
import qe_modules.PathFinderEdge as _PFE


global env
env = load_config_file(get_config_file_cmdarg('--env'))
global pf_auth
pf_auth = load_auth_file(get_config_file_cmdarg('--auth'))

global logger
logger = init_logger()


def pytest_addoption(parser):
    """Define ``env`` and ``auth`` command-line option for py.test.

    Defaults of **data/qed_env.yml** and **data/pf_auth.yml** respectively.
    """

    parser.addoption("--env", action="store", default="data/qed_env.yml",
                     help="Environment core configuration file.")
    parser.addoption("--auth", action="store", default="data/pf_auth.yml",
                     help="Authorization configuration file.")


class Context(object):
    """Holds global test configuration parameters & test environment hooks.

    *config* and *status* are created during object initialization, and are populated by the different tests.
    *pf* and *cl* are created during test initialization, as part of the *test_init_and_upgrade_SUT* script.

    * ``env`` - `Box <https://github.com/cdgriffith/Box>`_ object from *data/qed_env.yml*.
    * ``status`` - `Box <https://github.com/cdgriffith/Box>`_ with test status details. Example, flags for PF & PFE clean upgrades.
    * ``config`` - `Box <https://github.com/cdgriffith/Box>`_ holding data for driving different test cases,
      as generated by the different test scripts.
    * ``data`` - `Box <https://github.com/cdgriffith/Box>`_ with data for driving the tests, such as random object IDs.
    * ``pf`` - PathFinder class instance for PathFinder system under test.
        * ``pf.spec`` - Swagger spec retrieved from PathFinder SUT, possibly patched.
        * ``pf.cl`` - `Swagger client <http://bravado.readthedocs.io/en/latest/index.html>`_ instance, to make PathFinder RESTful calls.
    * ``cl`` - shorthand link to **pf.cl**.
    * ``PF`` - common access to :meth:`PathFinder` module/fixture.
    * ``PFE`` - common access to :meth:`PathFinderEdge` module/fixture.

    """

    def __init__(self):
        """Common variables for all tests, created at initialization."""
        global env, pf_auth
        self.config = Box()
        self.status = Box()
        self.env = Box()
        self.data = Box()
        self.status.PF_Clean_Upgrade = False
        self.status.PFE_Clean_Upgrade = False
        return

    def teardown(self):
        """Test tear-down."""
        try:
            logger.info('\n\n------ Test Details:\n')
            logger.info('\n\tPathFinder Server IP: {}'.format(self.env.QED))
            logger.info('\n\tPathFinder Server name: {}'.format(self.env.QED_Name))
            logger.info("\n\tJWT header & token: {} \n\n".format(
                self.PF.PathFinder.get_secure_token(
                    JWT_alg=pf_auth.JWT_alg,
                    JWT_Header=pf_auth.JWT_Header,
                    JWT_mac=pf_auth.JWT_mac,
                    JWT_iss=pf_auth.JWT_iss,
                    JWT_sub=pf_auth.JWT_sub,
                    JWT_aud=pf_auth.JWT_aud,
                    JWT_qedp=pf_auth.JWT_qedp,
                    JWT_exp=pf_auth.JWT_exp
                )
            ))
        except Exception:
            pass


@pytest.fixture(scope="session")
def pf(request):
    """PathFinder as a fixture."""
    PF = _PF
    PF.version = None

    def printVersion():
        if PF.version:
            logger.info("\n\tPathFinder version tested: {}".format(PF.version))
    request.addfinalizer(printVersion)
    return PF


@pytest.fixture(scope="session")
def pfe(request):
    """PathFinderEdge as a fixture."""
    PFE = _PFE
    PFE.version = None

    def printVersion():
        if PFE.version:
            logger.info("\n\tPathFinderEdge version tested: {}".format(PFE.version))
    request.addfinalizer(printVersion)
    return PFE


@pytest.fixture(scope="session", autouse=True)
def context(request, pf, pfe):
    """Common fixture to access system under test & test environment (test context)."""
    global env, pf_auth
    contextInstance = Context()
    contextInstance.PF = pf
    contextInstance.PFE = pfe
    contextInstance.envFile = request.config.getoption("--env")
    contextInstance.authFile = request.config.getoption("--auth")
    contextInstance.pf = contextInstance.PF.PathFinder(
        host=env.QED_Name,
        JWT_alg=pf_auth.JWT_alg,
        JWT_Header=pf_auth.JWT_Header,
        JWT_mac=pf_auth.JWT_mac,
        JWT_iss=pf_auth.JWT_iss,
        JWT_sub=pf_auth.JWT_sub,
        JWT_aud=pf_auth.JWT_aud,
        JWT_qedp=pf_auth.JWT_qedp,
        JWT_exp=pf_auth.JWT_exp
    )
    contextInstance.pf.cl = contextInstance.pf.get_schema_objects(
        host=env.QED_Name, patchFile=env.pfSchemaPatch)
    contextInstance.cl = contextInstance.pf.cl  # same links as in pytest run
    contextInstance.sc = contextInstance.pf.schema
    __builtins__['context'] = contextInstance
    contextInstance.cl = contextInstance.pf.get_schema_objects(host=env.QED_Name, patchFile=env.pfSchemaPatch)
    contextInstance.sc = contextInstance.pf.schema
    for key in contextInstance.pf.spec['definitions'].keys():
        globals()[key] = contextInstance.cl.get_model(key)
    request.addfinalizer(contextInstance.teardown)
    return contextInstance


@pytest.fixture
def should():
    """Provide should BDD keyword as a fixture."""
    return _should


@pytest.fixture
def expect():
    """Provide expect BDD keyword as a fixture."""
    return _expect
